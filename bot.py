import os
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram import F
from dotenv import load_dotenv
import asyncpg

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class Registration(StatesGroup):
    get_name = State()
    get_age = State()
    get_gender = State()
    get_location = State()
    get_photo = State()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_db_connection():
    return await asyncpg.connect(
        host=os.getenv("DB_HOST"),
        port=os.getenv("DB_PORT"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME")
    )



# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await get_db_connection()
        user_exists = await conn.fetchval(
            "SELECT 1 FROM bot.users WHERE user_id = $1",
            message.from_user.id
        )

        if user_exists:
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
                    [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(Registration.get_name)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏
@router.message(StateFilter(Registration.get_name))
async def process_name(message: Message, state: FSMContext):
    if len(message.text) > 50:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (14-100 –ª–µ—Ç):")
    await state.set_state(Registration.get_age)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(StateFilter(Registration.get_age))
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if not 14 <= age <= 100:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 100.")
        return

    await state.update_data(age=age)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞")],
            [types.KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=keyboard)
    await state.set_state(Registration.get_gender)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞
@router.message(StateFilter(Registration.get_gender))
async def process_gender(message: Message, state: FSMContext):
    gender_mapping = {
        "–º—É–∂—á–∏–Ω–∞": True,
        "–∂–µ–Ω—â–∏–Ω–∞": False
    }

    is_male = gender_mapping.get(message.text.lower())
    if is_male is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return

    await state.update_data(is_male=is_male)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Registration.get_location)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@router.message(StateFilter(Registration.get_location), F.location)
async def process_location(message: Message, state: FSMContext):
    location = message.location
    await state.update_data(
        longitude=location.longitude,
        latitude=location.latitude
    )
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:")
    await state.set_state(Registration.get_photo)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@router.message(StateFilter(Registration.get_photo), F.photo)
async def process_photo(message: Message, state: FSMContext):
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (–Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ
    photo = message.photo[-1]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ
    photo_file = await bot.get_file(photo.file_id)
    photo_bytes = await bot.download_file(photo_file.file_path)

    photo_data = photo_bytes.getvalue()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    try:
        conn = await get_db_connection()

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        async with conn.transaction():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await conn.execute('''
                INSERT INTO bot.users(user_id, name, is_male, age, location)
                VALUES($1, $2, $3, $4, ST_GeogFromText($5))
            ''',
                               message.from_user.id,
                               data["name"],
                               data["is_male"],
                               data["age"],
                               f"POINT({data['longitude']} {data['latitude']})")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            await conn.execute('''
                INSERT INTO bot.photos(user_id, photo)
                VALUES($1, $2)
            ''',
                               message.from_user.id,
                               photo_data)  # –ü–µ—Ä–µ–¥–∞–µ–º photo_data, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Ç–∏–ø–æ–º bytes

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            await conn.execute('''
                INSERT INTO bot.preferences(user_id, min_age, max_age, search_radius)
                VALUES($1, $2, $3, $4)
            ''',
                               message.from_user.id,
                               data["age"] - 2 if data["age"] > 16 else 14,
                               data["age"] + 2,
                               10)

        await message.answer(
            "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–ò–º—è: {data['name']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
            f"–ü–æ–ª: {'–ú—É–∂—á–∏–Ω–∞' if data['is_male'] else '–ñ–µ–Ω—â–∏–Ω–∞'}"
        )

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Database error: {e}")

    finally:
        if conn:
            await conn.close()
        await state.clear()


# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
class MainMenu(StatesGroup):
    main = State()
    view_profile = State()



# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    conn = None
    try:
        conn = await get_db_connection()
        user = await conn.fetchrow(
            "SELECT u.*, p.min_age, p.max_age, p.search_radius "
            "FROM bot.users u "
            "JOIN bot.preferences p ON u.user_id = p.user_id "
            "WHERE u.user_id = $1",
            message.from_user.id
        )

        if user:
            photos = await conn.fetch(
                "SELECT photo_id FROM bot.photos WHERE user_id = $1",
                message.from_user.id
            )

            response = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"–ò–º—è: {user['name']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
                f"–ü–æ–ª: {'–ú—É–∂—á–∏–Ω–∞' if user['is_male'] else '–ñ–µ–Ω—â–∏–Ω–∞'}\n"
                f"–ü–æ–∏—Å–∫: {user['min_age']}-{user['max_age']} –ª–µ—Ç, "
                f"—Ä–∞–¥–∏—É—Å {user['search_radius']} –∫–º\n"
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
            )
            await message.answer(response)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


# –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await get_db_connection()
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target = await conn.fetchrow(
            "SELECT u.* "
            "FROM bot.users u "
            "JOIN bot.preferences p ON u.user_id = p.user_id "
            "WHERE u.user_id != $1 "
            "AND u.age BETWEEN (SELECT min_age FROM bot.preferences WHERE user_id = $1) "
            "AND (SELECT max_age FROM bot.preferences WHERE user_id = $1) "
            "ORDER BY RANDOM() "
            "LIMIT 1",
            message.from_user.id
        )

        if target:
            photo = await conn.fetchrow(
                "SELECT photo FROM bot.photos WHERE user_id = $1 LIMIT 1",
                target['user_id']
            )

            caption = (
                f"üë§ {target['name']}, {target['age']}\n"
                f"–ü–æ–ª: {'–ú—É–∂—á–∏–Ω–∞' if target['is_male'] else '–ñ–µ–Ω—â–∏–Ω–∞'}"
            )

            if photo:
                await message.answer_photo(
                    photo['photo'],
                    caption=caption,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{target['user_id']}"),
                         types.InlineKeyboardButton(text="üëé", callback_data=f"dislike_{target['user_id']}")]
                    ])
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{target['user_id']}"),
                         types.InlineKeyboardButton(text="üëé", callback_data=f"dislike_{target['user_id']}")]
                    ])
                )

            await state.set_state(MainMenu.view_profile)
        else:
            await message.answer("üòû –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∞–π–∫–æ–≤
@router.callback_query(F.data.startswith("like_") | F.data.startswith("dislike_"))
async def handle_like(callback: types.CallbackQuery):
    action, target_id = callback.data.split("_")
    conn = None
    try:
        conn = await get_db_connection()
        if action == "like":
            await conn.execute(
                "INSERT INTO bot.likes(from_user, to_user) VALUES($1, $2)",
                callback.from_user.id,
                int(target_id)
            )
            await callback.answer("‚ù§Ô∏è –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        else:
            await callback.answer("üëé –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞–Ω–∫–µ—Ç—É")

    except asyncpg.exceptions.UniqueViolationError:
        await callback.answer("–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        print(f"Error: {e}")
    finally:
        if conn:
            await conn.close()



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_routers(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
