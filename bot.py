import os
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from dotenv import load_dotenv
import asyncpg

import src.registration

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('src/.env')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_db_connection():
    return await asyncpg.connect(
        host=os.getenv("DB_HOST"),
        port=os.getenv("DB_PORT"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_NAME")
    )

class MainMenu(StatesGroup):
    main = State()
    view_profile = State()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await get_db_connection()
        user_exists = await conn.fetchval(
            "SELECT 1 FROM bot.users WHERE user_id = $1",
            message.from_user.id
        )

        if user_exists:
            await state.clear()
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üîç –ü–æ–∏—Å–∫")],
                    [types.KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
                    [types.KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=keyboard
            )
            await state.set_state(MainMenu.main)
        else:
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=keyboard
            )

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def create_profile(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(src.registration.Registration.get_name)


@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def delete_profile(message: Message):
    conn = None
    try:
        conn = await get_db_connection()

        async with conn.transaction():
            # –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è REFERENCES CASCADE
            await conn.execute(
                "DELETE FROM bot.users WHERE user_id = $1",
                message.from_user.id
            )

        await message.answer(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await cmd_start(message, state=None)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await get_db_connection()
        user = await conn.fetchrow(
            "SELECT u.*, p.min_age, p.max_age, p.search_radius "
            "FROM bot.users u "
            "JOIN bot.preferences p ON u.user_id = p.user_id "
            "WHERE u.user_id = $1",
            message.from_user.id
        )

        if user:
            photos = await conn.fetch(
                "SELECT photo_id FROM bot.photos WHERE user_id = $1",
                message.from_user.id
            )

            response = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"–ò–º—è: {user['name']}\n"
                f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
                f"–ü–æ–ª: {'–ú—É–∂—á–∏–Ω–∞' if user['is_male'] else '–ñ–µ–Ω—â–∏–Ω–∞'}\n"
                f"–ü–æ–∏—Å–∫: {user['min_age']}-{user['max_age']} –ª–µ—Ç, "
                f"—Ä–∞–¥–∏—É—Å {user['search_radius']} –∫–º\n"
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}"
            )
            await message.answer(response)
            await state.set_state(MainMenu.main)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()


# –î–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: Message, state: FSMContext):
    conn = None
    try:
        conn = await get_db_connection()
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target = await conn.fetchrow(
            "SELECT u.* "
            "FROM bot.users u "
            "JOIN bot.preferences p ON u.user_id = p.user_id "
            "WHERE u.user_id != $1 "
            "AND u.age BETWEEN (SELECT min_age FROM bot.preferences WHERE user_id = $1) "
            "AND (SELECT max_age FROM bot.preferences WHERE user_id = $1) "
            "ORDER BY RANDOM() "
            "LIMIT 1",
            message.from_user.id
        )

        if target:
            photo = await conn.fetchrow(
                "SELECT photo FROM bot.photos WHERE user_id = $1 LIMIT 1",
                target['user_id']
            )

            caption = (
                f"üë§ {target['name']}, {target['age']}\n"
                f"–ü–æ–ª: {'–ú—É–∂—á–∏–Ω–∞' if target['is_male'] else '–ñ–µ–Ω—â–∏–Ω–∞'}"
            )

            if photo:
                await message.answer_photo(
                    photo['photo'],
                    caption=caption,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{target['user_id']}"),
                         types.InlineKeyboardButton(text="üëé", callback_data=f"dislike_{target['user_id']}")]
                    ])
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{target['user_id']}"),
                         types.InlineKeyboardButton(text="üëé", callback_data=f"dislike_{target['user_id']}")]
                    ])
                )

            await state.set_state(MainMenu.view_profile)
        else:
            await message.answer("üòû –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        print(f"Error: {e}")

    finally:
        if conn:
            await conn.close()




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_routers(router, src.registration.router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
