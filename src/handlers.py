import random
from os import remove

from aiogram import types, F
from aiogram.types import KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from src.settings import dp, db, bot
from start import show_profile, SearchPair, CreateProfile


@dp.message(Command("start"))
async def start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ù–∞—á–∞—Ç—å"),
            types.KeyboardButton(text="/Info")
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í–∑–ª–µ—Ç–∞–µ–º –±—Ä–∞—Ç",
        one_time_keyboard=False
    )
    await message.answer("–°–∞–ª–∞–º üëã\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.username, message.from_user.id, message.from_user.full_name)


@dp.message(Command("Info"))
async def info_message(message: types.Message):
    await message.answer("–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–∞ –ø–æ –±–æ—Ç—É")


@dp.message(F.text == "–ù–∞—á–∞—Ç—å")
async def magic_start(message: types.Message):
    kb_exists = [
        [
            KeyboardButton(text='–ù–∞–π—Ç–∏ –ø–∞—Ä–æ—á–∫—É')
        ],
        [
            KeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É')
        ],
        [
            KeyboardButton(text='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É')
        ],
        [
            KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
        ]
    ]

    kb_not_exists = [
        [
            KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É'),
        ],
    ]

    if not db.profile_exists(message.from_user.id):
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb_not_exists,
            resize_keyboard=True,
            input_field_placeholder="–ñ–ú–ò",
            one_time_keyboard=True
        )
        await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–¥–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É", reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb_exists,
            resize_keyboard=True,
            input_field_placeholder="–ñ–ú–ò",
            one_time_keyboard=False
        )
        await message.answer("–í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å", reply_markup=keyboard)


@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É")
async def check_profile(message: types.Message):
    await show_profile(message.from_user.id, message.from_user.id)


@dp.message(F.text == "–ù–∞–π—Ç–∏ –ø–∞—Ä–æ—á–∫—É")
async def start_of_search(message: types.Message, state: FSMContext):
    user_data = db.get_info(message.from_user.id)
    city = user_data[4]
    sex = user_data[6]
    pairs_list = db.search_profile(city, sex)
    await state.update_data(
        user=message.from_user.id,
        pairs_list=pairs_list
    )
    await state.set_state(SearchPair.SearchStart)
    await find_pair(message, state)


@dp.message(SearchPair.SearchStart)
async def find_pair(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pairs_list = data['pairs_list']
    user = data['user']
    if len(pairs_list) == 0:
        await message.answer("–ß–µ—Ç –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤–∏–¥–∏–º–æ –Ω–µ—Ç(((")
        await state.set_state(None)
        await magic_start(message)
    else:
        pair = random.choice(pairs_list)
        await show_profile(user, pair[0])
        kb = [
            [
                KeyboardButton(text='üëç'),
                KeyboardButton(text='üëé'),
                KeyboardButton(text='‚ùå')
            ],
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
            input_field_placeholder="–ñ–ú–ò",
            one_time_keyboard=False
        )
        await message.answer("–ö–∞–∫ —Ç–µ–±–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∏–∫?", reply_markup=keyboard)
        await state.update_data(current_pair_id=pair[0])
        await state.set_state(SearchPair.InActiveSearch)


@dp.message(SearchPair.InActiveSearch, F.text == 'üëç')
async def liked(message: types.Message, state: FSMContext):
    data = await state.get_data()
    pair = data['current_pair_id']
    await bot.send_message(pair, f"–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è(-–∞—Å—å) @{message.from_user.username}")
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è)")
    await state.set_state(SearchPair.SearchStart)
    await find_pair(message, state)


@dp.message(SearchPair.InActiveSearch, F.text == 'üëé')
async def disliked(message: types.Message, state: FSMContext):
    await state.set_state(SearchPair.SearchStart)
    await find_pair(message, state)


@dp.message(SearchPair.InActiveSearch, F.text == '‚ùå')
async def end_searching(message: types.Message, state: FSMContext):
    await state.set_state(None)
    await magic_start(message)


@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def create_profile(message: types.Message, state: FSMContext):
    if not db.profile_exists(message.from_user.id):
        await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é so style –∞–Ω–∫–µ—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —Ç–≤–æ–µ–≥–æ –∏–º—è, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?üòâ")
        await state.set_state(CreateProfile.name)
    else:
        await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞\n\n')


@dp.message(CreateProfile.name)
async def get_profile_name(message: types.Message, state: FSMContext):
    kb = [
        [
            KeyboardButton(text="–ú"),
            KeyboardButton(text="–ñ")
        ],
    ]

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ñ–ú–ò",
        one_time_keyboard=True
    )

    if len(str(message.text)) < 35:
        await state.update_data(profile_name=message.text.lower().title())
        await message.reply(
            message.text.title() + ' - —á–µ—Ç–∫–æ–µ –∏–º—èüòâ\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞', reply_markup=keyboard)
        await state.set_state(CreateProfile.sex)
    else:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
        return


@dp.message(CreateProfile.sex, F.text == '–ú' or F.text == '–ñ')
async def get_profile_sex(message: types.Message, state: FSMContext):
    await state.update_data(profile_sex=message.text)
    await message.reply("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç")
    await state.set_state(CreateProfile.age)


@dp.message(CreateProfile.sex, F.text != '–ú' and F.text != '–ñ')
async def anti_debil(message: types.Message, state: FSMContext):
    await message.answer("–°–æ–≤—Å–µ–º —Ç—É-—Ç—É\n–ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–≥–æ —Å–¥–µ–ª–∞–Ω—ã?")


@dp.message(CreateProfile.age)
async def get_profile_age(message: types.Message, state: FSMContext):
    if int(message.text) > 100 or int(message.text) < 10:
        await message.answer("–ù–µ –ø–æ–Ω–∏–º–∞—é, –±–ª–æ–∫–∏—Ä—É—é\n–í–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç")
        return
    await state.update_data(profile_age=int(message.text))
    await message.reply(
        message.text + ' - –¥–∞ —Ç—ã –≤ —Å–∞–º–æ–º —Ä–∞—Å—Ü–≤–µ—Ç–µ —Å–∏–ª\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
    await state.set_state(CreateProfile.description)


@dp.message(CreateProfile.description)
async def get_profile_description(message: types.Message, state: FSMContext):
    await state.update_data(profile_description=message.text)
    await message.reply("–ß–µ—Ç–∫–æ!\n–£–∫–∞–∂–∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞")
    await state.set_state(CreateProfile.city)


@dp.message(CreateProfile.city)
async def get_profile_city(message: types.Message, state: FSMContext):
    if db.city_exists(message.text.lower().title()):
        await state.update_data(profile_city=message.text.lower().title())
        await message.reply("–°–∫–∏–Ω—å —Å–≤–æ—é —Ñ–æ—Ç–∫—É")
        await state.set_state(CreateProfile.photo)
    else:
        await message.answer("–Ø —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –†–§ –Ω–µ –∑–Ω–∞—é")


@dp.message(CreateProfile.photo)
async def get_profile_photo(message: types.Message, state: FSMContext):
    kb = [
        [
            KeyboardButton(text="–°–∫–∏–ø")
        ],
    ]

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ñ–ú–ò",
        one_time_keyboard=True
    )
    if message.photo:
        await bot.download(
            message.photo[-1],
            destination=f"photos/{message.from_user.id}.jpg"
        )
        data = await state.get_data()
        sex = data['profile_sex']
        if sex == "–ú":
            await message.reply("–ê —Ç—ã –∫—Ä–∞c–∞–≤—á–∏–∫)))\n–¢–µ–ø–µ—Ä—å –∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Å–æ—Ü.—Å–µ—Ç—å (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                                reply_markup=keyboard)
        else:
            await message.reply("–ê —Ç—ã –∫—Ä–∞—Å–æ—Ç–∫–∞)))\n–¢–µ–ø–µ—Ä—å –∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Å–æ—Ü.—Å–µ—Ç—å (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                                reply_markup=keyboard)
        await state.set_state(CreateProfile.social_link)
    else:
        await message.answer("–ù–∞–¥–æ –≤—Å–µ-—Ç–∞–∫–∏ —Ñ–æ—Ç–∫—É")


@dp.message(CreateProfile.social_link)
async def get_profile_link(message: types.Message, state: FSMContext):
    await state.update_data(profile_link=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–≤—Å–µ–º –∫—Ä—É—Ç–æ, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω")
    user_data = await state.get_data()
    db.create_profile(message.from_user.id, message.from_user.username, str(user_data['profile_name']),
                      str(user_data['profile_description']), str(user_data['profile_city']),
                      'photos/' + str(message.from_user.id) + '.jpg', str(user_data['profile_sex']),
                      str(user_data['profile_age']), str(user_data['profile_link']))
    await state.set_state(None)
    await magic_start(message)


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def delete_profile(message: types.Message):
    if db.profile_exists(message.from_user.id):
        remove(f"src/photos/{message.from_user.id}.jpg")
        db.delete_profile(message.from_user.id)
        await message.answer('–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!')
        await magic_start(message)


@dp.message(F.text == "–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def change_profile(message: types.Message, state: FSMContext):
    if db.profile_exists(message.from_user.id):
        remove(f"src/photos/{message.from_user.id}.jpg")
        db.delete_profile(message.from_user.id)
    await message.answer("–û–∫–µ–π, –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –Ω–æ–≤–æ–π\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è")
    await state.set_state(CreateProfile.name)