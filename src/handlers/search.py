from aiogram import F, Router, types
from aiogram.types import CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton

from .common import dgap_photo
from ..config import get_db_connection
from ..database.queries import GET_STACK_QUERY, SELECT_USER_PHOTO_QUERY, GET_MATCHES_QUERY
from ..keyboards.builders import match_keyboard, inline_main_menu_keyboard

router = Router()

@router.callback_query(F.data == 'find_match')
async def find_match(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    conn = await get_db_connection()

    try:
        stack = await conn.fetch(GET_STACK_QUERY, callback.from_user.id)
        await conn.close()
        if not stack:
            media = InputMediaPhoto(
                media=dgap_photo,
                caption="üòî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è–π —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞."
            )
            await callback.message.edit_media(media=media, reply_markup=inline_main_menu_keyboard)
            return

        await state.update_data(matches=stack, current_index=0)
        await show_next_profile(callback, state)

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
    finally:
        await conn.close()


@router.callback_query(F.data == 'next_profile')
async def show_next_profile(callback: CallbackQuery, state: FSMContext):
    conn = await get_db_connection()
    data = await state.get_data()
    index = data['current_index']
    matches = data['matches']

    if index >= len(matches):
        media = InputMediaPhoto(
            media=dgap_photo,
            caption="üíî –≠—Ç–∞ —Å—Ç–æ–ø–∫–∞ –∫–æ–Ω—á–∏–ª–∞—Å—å(\n–ú–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é"
        )
        await callback.message.edit_media(media=media, reply_markup=inline_main_menu_keyboard)
        await state.clear()
        return

    user = matches[index]
    photos = await conn.fetch(SELECT_USER_PHOTO_QUERY, user['user_id'])

    caption = (
        f"[{index + 1}/{len(matches)}]\n"
        f"üë§ {user['name']}, {user['age']}\n"
        f"üìç {round(user['distance_km'])} –∫–º –æ—Ç –≤–∞—Å"
    )

    media = InputMediaPhoto(
        media=photos[0]['photo'],
        caption=caption
    )

    await callback.message.edit_media(media=media, reply_markup=match_keyboard)
    await state.update_data(current_index=index + 1)


async def update_match_status(conn, current_user_id, user1, user2, is_like):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü –æ–±–Ω–æ–≤–ª—è—Ç—å
    column = 'first_to_second' if current_user_id == user1 else 'second_to_first'

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await conn.execute(f"""
        INSERT INTO bot.match (user_id_1, user_id_2, {column})
        VALUES ($1, $2, $3)
        ON CONFLICT (user_id_1, user_id_2) 
        DO UPDATE SET {column} = EXCLUDED.{column}
    """, user1, user2, is_like)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    match_record = await conn.fetchrow(
        "SELECT first_to_second, second_to_first FROM bot.match WHERE user_id_1 = $1 AND user_id_2 = $2",
        user1, user2
    )

    if match_record and match_record['first_to_second'] and match_record['second_to_first']:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
            INSERT INTO bot.done_match (user_id, user_id_with)
            VALUES ($1, $2), ($2, $1)
            ON CONFLICT DO NOTHING
        """, user1, user2)

        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã match (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await conn.execute(
            "DELETE FROM bot.match WHERE user_id_1 = $1 AND user_id_2 = $2",
            user1, user2
        )

@router.callback_query(F.data == 'like')
async def process_like(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_user_id = callback.from_user.id
    target_user = data['matches'][data['current_index'] - 1]

    conn = await get_db_connection()
    try:
        user1 = min(current_user_id, target_user['user_id'])
        user2 = max(current_user_id, target_user['user_id'])

        await update_match_status(conn, current_user_id, user1, user2, is_like=True)

        await callback.answer(text="–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", show_alert=True)
        await show_next_profile(callback, state)

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    finally:
        await conn.close()

@router.callback_query(F.data == 'dislike')
async def process_dislike(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_user_id = callback.from_user.id
    target_user = data['matches'][data['current_index'] - 1]

    conn = await get_db_connection()
    try:
        user1 = min(current_user_id, target_user['user_id'])
        user2 = max(current_user_id, target_user['user_id'])

        await update_match_status(conn, current_user_id, user1, user2, is_like=False)

        await callback.answer(text="–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º", show_alert=True)
        await show_next_profile(callback, state)

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
    finally:
        await conn.close()


# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∞–π–ª search.py
@router.callback_query(F.data == 'get_match')
async def get_matches(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    conn = await get_db_connection()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π
        matches = await conn.fetch(GET_MATCHES_QUERY, callback.from_user.id)
        await conn.close()

        if not matches:
            media = InputMediaPhoto(
                media=dgap_photo,
                caption="ü§∑‚Äç‚ôÇÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π."
            )
            await callback.message.edit_media(media=media, reply_markup=inline_main_menu_keyboard)
            return


        await state.update_data(matches=matches, current_index=0, is_matches_mode=True)
        await show_next_match(callback, state)

    except Exception as e:
        print(f"Error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º—ç—Ç—á–µ–π")
    finally:
        await conn.close()


# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∞–π–ª search.py
@router.callback_query(F.data == 'next_match')
async def next_match_handler(callback: CallbackQuery, state: FSMContext):
    await show_next_match(callback, state)


async def show_next_match(callback: CallbackQuery, state: FSMContext):
    conn = await get_db_connection()
    data = await state.get_data()
    index = data['current_index']
    matches = data['matches']

    if index >= len(matches):
        media = InputMediaPhoto(
            media=dgap_photo,
            caption="üèÅ –≠—Ç–æ –≤—Å–µ –≤–∞—à–∏ –º—ç—Ç—á–∏!"
        )
        await callback.message.edit_media(media=media, reply_markup=inline_main_menu_keyboard)
        await state.clear()
        return

    match = matches[index]
    photos = await conn.fetch(SELECT_USER_PHOTO_QUERY, match['matched_user_id'])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    caption = (
        f"[{index + 1}/{len(matches)}]\n"
        f"üë§ {match['name']}, {match['age']}\n"
        f"üíå –Æ–∑–µ—Ä–Ω–µ–π–º: @{match['matched_username']}\n"
        f"üîó –°—Å—ã–ª–∫–∞: https://t.me/{match['matched_username']}"
    )

    media = InputMediaPhoto(
        media=photos[0]['photo'] if photos else dgap_photo,
        caption=caption
    )

    match_view_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data='next_match')],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å", url=f"https://t.me/{match['matched_username']}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]
    ])

    await callback.message.edit_media(media=media, reply_markup=match_view_keyboard)
    await state.update_data(current_index=index + 1)