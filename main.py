import logging

import aiogram.types
from aiogram import types
from aiogram.types import KeyboardButton

import asyncio
from aiogram import Bot, Dispatcher, F

from database import dbworker

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                    level=logging.INFO,
                    filename='bot.log')

bot = Bot(token="6988902728:AAFloEdVRQe_pptszssonORpyuWEa9Fzfew")
dp = Dispatcher()

db = dbworker('database.db')


class CreateProfile(StatesGroup):
    name = State()
    description = State()
    city = State()
    photo = State()
    sex = State()
    age = State()
    social_link = State()


@dp.message(Command("start"))
async def start(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="/–ù–∞—á–∞—Ç—å"),
        ],
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–í–∑–ª–µ—Ç–∞–µ–º –±—Ä–∞—Ç",
        one_time_keyboard=True
    )
    await message.answer("–°–∞–ª–∞–º –±—Ä–∞—Ç", reply_markup=keyboard)
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å")
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.username, message.from_user.id, message.from_user.full_name)


@dp.message(Command("–ù–∞—á–∞—Ç—å"))
async def magic_start(message: types.Message):
    kb_exists = [
        [
            KeyboardButton(text='/–ù–∞–π—Ç–∏ –ø–∞—Ä–æ—á–∫—Éüîç'),
            KeyboardButton(text='/–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—Éüìù'),
            KeyboardButton(text='/–£–¥–∞–ª–∏—Ç—åüóë'),
        ],
    ]

    kb_not_exists = [
        [
            KeyboardButton(text='/–°–æ–∑–¥–∞—Ç—å_–∞–Ω–∫–µ—Ç—É'),
        ],
    ]

    if not db.profile_exists(message.from_user.id):
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb_not_exists,
            resize_keyboard=True,
            input_field_placeholder="–ñ–ú–ò",
            one_time_keyboard=True
        )
    else:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb_exists,
            resize_keyboard=True,
            input_field_placeholder="–ñ–ú–ò",
            one_time_keyboard=True
        )

    await message.answer(
        "–í—ã–±–∏—Ä–∞–π —á–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å",
        reply_markup=keyboard)


@dp.message(Command("–°–æ–∑–¥–∞—Ç—å_–∞–Ω–∫–µ—Ç—É"))
async def create_profile(message: types.Message, state: FSMContext):
    if not db.profile_exists(message.from_user.id):
        await message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é so style –∞–Ω–∫–µ—Ç—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Å —Ç–≤–æ–µ–≥–æ –∏–º—è, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?üòâ")
        await state.set_state(CreateProfile.name)
    else:
        await message.answer('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∫–µ—Ç–∞\n\n')


@dp.message(CreateProfile.name)
async def get_profile_name(message: types.Message, state: FSMContext):
    kb = [
        [
            KeyboardButton(text="–ú"),
            KeyboardButton(text="–ñ")
        ],
    ]

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        input_field_placeholder="–ñ–ú–ò",
        one_time_keyboard=True
    )

    if len(str(message.text)) < 35:
        await state.update_data(profile_name=message.text.lower())
        await message.reply(
            message.text.title() + ' - —á–µ—Ç–∫–æ–µ –∏–º—èüòâ\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞', reply_markup=keyboard)
        await state.set_state(CreateProfile.sex)
    else:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
        return


@dp.message(CreateProfile.sex)
async def get_profile_sex(message: types.Message, state: FSMContext):
    await state.update_data(profile_sex=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç")
    await state.set_state(CreateProfile.age)


@dp.message(CreateProfile.age)
async def get_profile_age(message: types.Message, state: FSMContext):
    await state.update_data(profile_age=int(message.text))
    await message.reply(
        message.text + ' - –¥–∞ —Ç—ã –≤ —Å–∞–º–æ–º —Ä–∞—Å—Ü–≤–µ—Ç–µ —Å–∏–ª\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è')
    await state.set_state(CreateProfile.description)


@dp.message(CreateProfile.description)
async def get_profile_description(message: types.Message, state: FSMContext):
    await state.update_data(profile_description=message.text)
    await message.reply("–ß–µ—Ç–∫–æ!\n–£–∫–∞–∂–∏ –∏–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞")
    await state.set_state(CreateProfile.city)


@dp.message(CreateProfile.city)
async def get_profile_city(message: types.Message, state: FSMContext):
    await state.update_data(profile_city=message.text)
    await message.reply("–°–∫–∏–Ω—å —Å–≤–æ—é —Ñ–æ—Ç–∫—É")
    await state.set_state(CreateProfile.photo)


@dp.message(CreateProfile.photo)
async def get_profile_photo(message: types.Message, state: FSMContext):
    if message.photo:
        await bot.download(
            message.photo[-1],
            destination=f"photos/{message.from_user.id}.jpg"
        )
        await message.reply("–ê —Ç—ã —Å–æ—Å–æ—á–∫–∞)))\n–¢–µ–ø–µ—Ä—å –∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –≤–∫")
        await state.set_state(CreateProfile.social_link)
    else:
        await message.answer("–ù–∞–¥–æ –≤—Å–µ-—Ç–∞–∫–∏ —Ñ–æ—Ç–∫—É")


@dp.message(CreateProfile.social_link)
async def get_profile_link(message: types.Message, state: FSMContext):
    await state.update_data(profile_link=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–≤—Å–µ–º –∫—Ä—É—Ç–æ, —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω")
    user_data = await state.get_data()
    db.create_profile(message.from_user.id, message.from_user.username, str(user_data['profile_name']),
                      str(user_data['profile_description']), str(user_data['profile_city']),
                      'photo/' + str(message.from_user.id) + '.jpg', str(user_data['profile_sex']),
                      str(user_data['profile_age']), str(user_data['profile_link']))
    await state.set_state(None)
    await magic_start(message)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
